import { Chat } from '@mui/icons-material';
import {
	Box,
	Button,
	Card,
	CardActions,
	CardContent,
	CardMedia,
	CircularProgress,
	FormControl,
	IconButton,
	InputLabel,
	MenuItem,
	Select,
	SelectChangeEvent,
	Stack,
	Typography
} from '@mui/material';
import React, { useEffect } from 'react';
import { useNavigate, useParams } from 'react-router-dom';
import { API_GATEWAY, getUsers } from '../../api/gatewayClientAPI';
import { addUserToProject, getUserProjects } from '../../api/projects';
import { BIDSDataset, ContainerType, User } from '../../api/types';
import { useNotification } from '../../hooks/useNotification';
import { useAppStore } from '../../Store';
import Data from './Data';
import ProjectCard from './ProjectCard';

const ProjectDashboard = () => {
	const navigate = useNavigate()
	const params = useParams()
	const { showNotif } = useNotification()

	const [datasets, setDatasets] = React.useState<
		{ data?: BIDSDataset[]; error?: string } | undefined
	>()
	const [isAddingUser, setIsAddingUser] = React.useState(false)
	const [users, setUsers] = React.useState<User[]>([])
	const {
		containers: [containers],
		BIDSDatasets: [bidsDatasets],
		user: [user],
		userProjects: [userProjects, setUserProjects],
	} = useAppStore()

	// React.useEffect(() => {
	// 	if (!user?.uid) return
	// 	getProjectDatasets(user?.uid).then(datasets => {
	// 		setDatasets({ data: datasets })
	// 	})
	// }, [user?.uid])

	useEffect(() => {
		getUsers().then(users => setUsers(users))
	}, [])

	const handleAddUserToProject = (userId: string) => {
		if (!project?.name) return

		addUserToProject(userId, project.name)
			.then(() => {
				showNotif('User added', 'success')
				setIsAddingUser(false)

				if (user?.uid) {
					getUserProjects(user.uid).then(projects => {
						setUserProjects(projects)
					})
				}
			})
			.catch(e => {
				showNotif(`${e}`, 'error')
			})
	}

	const servers = containers?.filter(c => c.type === ContainerType.DESKTOP)

	const project = userProjects?.find(
		project => project.name === params?.projectId
	)

	return (
		<>
			<Typography sx={{ color: 'secondary.light' }} gutterBottom variant='h6'>
				Welcome {user?.displayName}
			</Typography>

			<Box sx={{ mt: 4 }}>
				<Box
					sx={{
						display: 'grid',
						gridTemplateColumns: '320px 320px 320px',
						gap: 4,
					}}
				>
					<Box sx={{ gridColumn: '1', gridRow: '1' }}>
						{project && <ProjectCard group={project} />}
					</Box>

					<>
						<Box sx={{ gridColumn: '2', gridRow: '1' }}>
							<Card
								sx={{
									width: 320,
								}}
							>
								<Box sx={{ position: 'relative' }}>
									<CardMedia
										component='img'
										height='160'
										src={`${API_GATEWAY}/public/media/2825956551_neural_pathway__medical__futuristic__lots_of_neurons_and_dendrites__human__photo_realistic__picture_of_the_day.png`}
										title={
											'Image generated by DreamStudio, Text-to-Image Generative Art, https://beta.dreamstudio.ai/dream'
										}
									/>
								</Box>
								<CardContent>
									<Typography sx={{ mb: 2 }} variant='h5'>
										Members
									</Typography>

									{project?.members === undefined && (
										<CircularProgress
											size={16}
											color='secondary'
											sx={{ top: 10, left: 10 }}
										/>
									)}

									<Stack spacing={1}>
										{project?.members?.length === 0 && (
											<Typography variant='subtitle2'>
												No members yet
											</Typography>
										)}
										{users
											?.filter(u =>
												[
													...(project?.members || []),
													...(project?.admins || []),
												].includes(u.id)
											)
											.map(user => (
												<Box
													key={user.id}
													sx={{
														display: 'flex ',
														gap: 2,
														justifyContent: 'space-between',
													}}
												>
													<Stack>
														<Typography variant='subtitle2'>
															{user.displayName}
														</Typography>
														<Typography color='text.secondary' variant='body2'>
															{user.email}
														</Typography>
													</Stack>

													<IconButton
														color='primary'
														onClick={() => {
															window.open(`/u/${user.id}`, '_blank')
														}}
														aria-label={`Chat with ${user.displayName}`}
													>
														<Chat />
													</IconButton>
												</Box>
											))}
									</Stack>

									{isAddingUser && <Typography>Add User</Typography>}
									{isAddingUser && (
										<>
											<FormControl sx={{ m: 1, minWidth: 180, maxWidth: 180 }}>
												<InputLabel variant='outlined'>Select</InputLabel>
												<Select
													size={'small'}
													//defaultValue={numberOfResultsPerPage}
													onChange={(event: SelectChangeEvent<string>) => {
														handleAddUserToProject(event.target.value)
													}}
												>
													{users.map(user => (
														<MenuItem key={user.id} value={user.id}>
															{user.displayName}
														</MenuItem>
													))}
												</Select>
											</FormControl>
											<Button variant='outlined'>Add Member</Button>
										</>
									)}
									{!isAddingUser && (
										<Button
											onClick={() => setIsAddingUser(true)}
											variant='outlined'
										>
											Add Member
										</Button>
									)}
								</CardContent>
								<CardActions sx={{ p: 2 }}></CardActions>
							</Card>
						</Box>
						<Box sx={{ gridColumn: '1', gridRow: '2' }}>{/* <Tools /> */}</Box>
						<Box sx={{ gridColumn: '3', gridRow: '1 / 3' }}>
							<Data
								project={project}
								bidsDatasets={datasets}
								sessions={servers}
							/>
						</Box>
					</>
				</Box>
			</Box>
		</>
	)
}

export default ProjectDashboard
