import * as React from 'react'
import { Chat } from '@mui/icons-material'
import {
	Box,
	Button,
	Card,
	CardActions,
	CardContent,
	CardMedia,
	CircularProgress,
	FormControl,
	IconButton,
	InputLabel,
	MenuItem,
	Select,
	SelectChangeEvent,
	Stack,
	Typography,
} from '@mui/material'
import { Clear } from '@mui/icons-material'
import { HIPCenter as project, HIPProject, User } from '../../api/types'
import { API_GATEWAY } from '../../api/gatewayClientAPI'
import UserInfo from '../UI/UserInfo'
import { useAppStore } from '../../Store'

interface Props {
	project?: HIPProject
	users?: User[]
	handleAddUserToProject: (userId: string) => void
	confirmRemove: (userId: string) => void
}

const Members = ({
	project,
	users,
	handleAddUserToProject,
	confirmRemove,
}: Props) => {
	const [userToAdd, setUserToAdd] = React.useState('')
	const {
		user: [user],
	} = useAppStore()
	return (
		<>
			{project && (
				<Card
					sx={{
						display: 'flex',
						width: 320,
						flexDirection: 'column',
					}}
					key={`members-${project.name}`}
				>
					<Box sx={{ position: 'relative' }}>
						<CardMedia
							component='img'
							height='160'
							src={`${API_GATEWAY}/public/media/2825956551_neural_pathway__medical__futuristic__lots_of_neurons_and_dendrites__human__photo_realistic__picture_of_the_day.png`}
							alt={project.title}
							title={
								'Image generated by DreamStudio, Text-to-Image Generative Art, https://beta.dreamstudio.ai/dream'
							}
						/>
					</Box>
					<CardContent>
						<Typography sx={{ mb: 2 }} variant='h5'>
							Members
						</Typography>

						{users === undefined && (
							<CircularProgress
								size={16}
								color='secondary'
								sx={{ top: 10, left: 10 }}
							/>
						)}

						<Stack spacing={1}>
							{project?.members?.length === 0 && (
								<Typography variant='subtitle2'>No members yet</Typography>
							)}
							{users
								?.filter(u =>
									[
										...(project?.members || []),
										...(project?.admins || []),
									].includes(u.id)
								)
								.map(u => (
									<Box
										key={u.id}
										display='flex'
										justifyContent='space-between'
										alignItems='center'
									>
										<UserInfo key={u.id} user={u} />
										{user?.uid && project?.admins?.includes(user.uid) && (
											<IconButton onClick={() => confirmRemove(u.id)}>
												<Clear />
											</IconButton>
										)}
									</Box>
								))}
						</Stack>
					</CardContent>
					<CardActions sx={{ p: 2 }}>
						{user?.uid && project?.admins?.includes(user.uid) && (
							<>
								<FormControl sx={{ m: 1, minWidth: 180, maxWidth: 180 }}>
									<InputLabel variant='outlined'>Select</InputLabel>
									<Select
										size={'small'}
										//defaultValue={numberOfResultsPerPage}
										onChange={(event: SelectChangeEvent<string>) => {
											setUserToAdd(event.target.value)
										}}
									>
										{users?.map(user => (
											<MenuItem key={user.id} value={user.id}>
												{user.displayName}
											</MenuItem>
										))}
									</Select>
								</FormControl>

								<Button
									onClick={() => handleAddUserToProject(userToAdd)}
									variant='outlined'
								>
									Add Member
								</Button>
							</>
						)}
					</CardActions>
				</Card>
			)}
		</>
	)
}

export default Members
