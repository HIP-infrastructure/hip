import * as React from 'react'
import {
	Box,
	Card,
	CardActions,
	CardContent,
	CardMedia,
	CircularProgress,
	FormControl,
	InputLabel,
	MenuItem,
	Select,
	SelectChangeEvent,
	Stack,
	Typography,
} from '@mui/material'
import { Clear } from '@mui/icons-material'
import { HIPProject, User } from '../../api/types'
import { API_GATEWAY } from '../../api/gatewayClientAPI'
import UserInfo from '../UI/UserInfo'
import { useAppStore } from '../../Store'
import { LoadingButton } from '@mui/lab'
import { useEffect } from 'react'

interface Props {
	project?: HIPProject | null
	users?: User[]
	handleAddUserToProject: (userId: string) => void
	handleRemoveUserFromProject: (userId: string) => void
}

const MemberCard = ({
	project,
	users,
	handleAddUserToProject,
	handleRemoveUserFromProject,
}: Props) => {
	const [userToAdd, setUserToAdd] = React.useState('')
	const [loading, setLoading] = React.useState(false)
	const [removeLoading, setRemoveLoading] = React.useState(false)
	const {
		user: [user],
	} = useAppStore()

	useEffect(() => {
		setLoading(false)
		setRemoveLoading(false)
	}, [project])

	return (
		<>
			{project && (
				<Card
					sx={{
						display: 'flex',
						width: 320,
						flexDirection: 'column',
					}}
					key={`members-${project.name}`}
				>
					<Box sx={{ position: 'relative' }}>
						<CardMedia
							component='img'
							height='160'
							src={`${API_GATEWAY}/public/media/hospital-staff-members.png`}
							alt={project.title}
							title={
								'Image generated by DreamStudio, Text-to-Image Generative Art, https://beta.dreamstudio.ai/dream'
							}
						/>
					</Box>
					<CardContent>
						<Typography sx={{ mb: 2 }} variant='h5'>
							Members
						</Typography>

						{users === undefined && (
							<CircularProgress
								size={16}
								color='secondary'
								sx={{ top: 10, left: 10 }}
							/>
						)}

						<Stack spacing={1}>
							{project?.members?.length === 0 && (
								<Typography variant='subtitle2'>No members yet</Typography>
							)}

							{[...(project?.members || [])]
								.map(
									u =>
										users?.find(user => user.id === u) || {
											id: u,
											name: u,
											displayName: u,
										}
								)
								.map(u => (
									<Box
										key={u.id}
										display='flex'
										justifyContent='space-between'
										alignItems='center'
									>
										<UserInfo key={u.id} user={u} />
										{user?.uid &&
											project?.admins?.includes(user.uid) &&
											user?.uid !== u.id && (
												<LoadingButton
													loading={removeLoading}
													disabled={removeLoading}
													onClick={() => {
														setRemoveLoading(true)
														handleRemoveUserFromProject(u.id)
													}}
												>
													<Clear />
												</LoadingButton>
											)}
									</Box>
								))}
						</Stack>
					</CardContent>
					<CardActions sx={{ p: 2 }}>
						{user?.uid && project?.admins?.includes(user.uid) && (
							<Box
								display='flex'
								justifyContent='space-between'
								alignItems='center'
							>
								<FormControl sx={{ m: 1, minWidth: 180 }}>
									<InputLabel variant='outlined'>Select</InputLabel>
									<Select
										size={'small'}
										//defaultValue={numberOfResultsPerPage}
										onChange={(event: SelectChangeEvent<string>) => {
											setUserToAdd(event.target.value)
										}}
									>
										{users
											?.filter(user => !project?.members?.includes(user.id))
											.map(user => (
												<MenuItem key={user.id} value={user.id}>
													{user.displayName}
												</MenuItem>
											))}
									</Select>
								</FormControl>

								<LoadingButton
									disabled={loading}
									onClick={() => {
										setLoading(true)
										handleAddUserToProject(userToAdd)
									}}
									variant='outlined'
									loading={loading}
								>
									Add
								</LoadingButton>
							</Box>
						)}
					</CardActions>
				</Card>
			)}
		</>
	)
}

export default MemberCard
