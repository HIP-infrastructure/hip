// import { useMatomo } from '@jonkoops/matomo-tracker-react'
import * as React from 'react'
import {
	Box,
	Card,
	CardContent,
	CardMedia,
	FormControlLabel,
	Link,
	Switch,
	Typography,
} from '@mui/material'
import { useEffect, useState } from 'react'
import { useParams } from 'react-router-dom'
import { getUsersForGroup } from '../../api/gatewayClientAPI'
import { ContainerType, HIPGroup } from '../../api/types'
import { useNotification } from '../../hooks/useNotification'
import { useAppStore } from '../../store/appProvider'
import TitleBar from '../UI/titleBar'
import Data from './Data'
import MainCard from './MainCard'
import Members from './Members'
import Tools from './Tools'

const linkStyle = {
	textDecoration: 'underline',
	color: '#0277bd',
}

const Dashboard = () => {
	const {
		containers: [containers],
		BIDSDatasets: [bidsDatasets],
		hipGroups: [groups, setGroups],
		user: [user],
		debug: [debug, setDebug],
	} = useAppStore()

	const { showNotif } = useNotification()
	const [id, setId] = useState<string | undefined>()
	const [group, setGroup] = useState<HIPGroup | undefined | null>()

	// const { trackEvent } = useMatomo()
	const { id: incomingId } = useParams()

	useEffect(() => {
		if (!incomingId || incomingId === 'default' || incomingId === id) return
		setId(incomingId)
	}, [incomingId, id, setId])

	useEffect(() => {
		if (!id || !groups) return

		const center = groups
			?.filter(group => group.id === id)
			?.find((_, i) => i === 0)

		if (!center) {
			setGroup(null)
			return
		}

		setGroup(center)
	}, [id, groups, setGroup, showNotif])

	useEffect(() => {
		if (!id || !groups || !group) return

		const center = groups
			?.filter(group => group.id === id)
			?.find((_, i) => i === 0)

		if (!center?.users) {
			getUsersForGroup(group.id)
				.then(users => {
					setGroups(groups =>
						(groups || []).map(g =>
							g.id === group.id ? { ...group, users } : g
						)
					)
				})
				.catch(err => {
					showNotif(err.message, 'error')
				})
		}
	}, [id, groups, group, setGroups, showNotif])

	const sessions = containers?.data?.filter(
		c => c.type === ContainerType.SESSION
	)
	const isMember = group && user?.groups?.includes(group?.id)

	return (
		<>
			<Box sx={{ mb: 2 }}>
				<TitleBar
					title={`${group?.label || ''} Private Space`}
					description={''}
				/>
			</Box>
			{isMember && (
				<Typography sx={{ color: 'secondary.light' }} gutterBottom variant='h6'>
					Welcome {user?.displayName}
				</Typography>
			)}

			{groups && group === null && (
				<Box>
					<Card
						sx={{
							width: 320,
							height: 440,
						}}
						key={`center-tools`}
					>
						<CardMedia
							component='img'
							height='160'
							src={`${process.env.REACT_APP_GATEWAY_API}/public/media/3929266907_two_angels_communicating__neural_pathway__consciousness__neurons_and_dendrites__photo_realistic__blue__picture_of_the_day.png`}
							alt={'Access the HIP'}
							title='Image generated by DreamStudio, Text-to-Image Generative Art, https://beta.dreamstudio.ai/dream'
						/>
						<CardContent>
							<Typography sx={{ mt: 2, color: 'secondary.light' }} variant='h6'>
								It looks like you don&apos;t belong to any group yet. Please
								contact{' '}
								<Link
									target={'_blank'}
									href={'mailto:support@thehip.app'}
									style={linkStyle}
								>
									support@thehip.app
								</Link>{' '}
								or chat with our amazing{' '}
								<Link
									target={'_blank'}
									style={linkStyle}
									href={'https://thehip.app/u/sa3623'}
								>
									hip admin
								</Link>{' '}
								to fix this.
							</Typography>
						</CardContent>
					</Card>
				</Box>
			)}

			<Box sx={{ width: 0.75, mt: 4 }}>
				<Box
					sx={{
						display: 'flex',
						justifyContent: 'start',
						alignItems: 'start',
					}}
				>
					<Box
						sx={{
							flex: isMember ? '2 1 0%' : '0 1 0%',
							display: 'flex',
							justifyContent: 'start',
							gap: '32px 32px',
							flexWrap: 'wrap',
							alignItems: 'start',
						}}
					>
						{group && <MainCard group={group} />}
						{isMember && (
							<Data bidsDatasets={bidsDatasets} sessions={sessions} />
						)}
						{debug && isMember && <Tools />}
					</Box>
					<Box sx={{ ml: isMember ? 0 : 4, flex: '1 0 0%' }}>
						{group && <Members group={group} users={group?.users} />}
					</Box>
				</Box>
			</Box>

			<Box sx={{ ml: 2, mt: 8 }}>
				<FormControlLabel
					control={<Switch checked={debug} onChange={() => setDebug(!debug)} />}
					label='Debug'
				/>
			</Box>
		</>
	)
}

export default Dashboard
